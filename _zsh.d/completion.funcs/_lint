#compdef lint
local ops

_lint() {
    functions ids() {
        lint --list  | sed -e 's/^"\(\w*\)":.*/\1/;t_;d;:_'
    }
    local -a ids
    ids=(
'ContentDescription: Ensures that image widgets provide a contentDescription'
'LabelFor: Ensures that text fields are marked with a labelFor attribute'
'FloatMath: Suggests replacing android.util.FloatMath calls with java.lang.Math'
'FieldGetter: Suggests replacing uses of getters with direct field access within a class'
'SdCardPath: Looks for hardcoded references to /sdcard'
'NewApi: Finds API accesses to APIs that are not supported in all targeted API versions'
'InlinedApi: Finds inlined fields that may or may not work on older platforms'
'Override: Finds method declarations that will accidentally override methods in later versions'
'InvalidPackage: Finds API accesses to APIs that are not supported in Android'
'DuplicateIncludedIds: Checks for duplicate ids across layouts that are combined with include tags'
'DuplicateIds: Checks for duplicate ids within a single layout'
'DuplicateDefinition: Discovers duplicate definitions of resources'
'UnknownId: Checks for id references in RelativeLayouts that are not defined elsewhere'
'UnknownIdInLayout: Makes sure that @+id references refer to views in the same layout'
'StateListReachable: Looks for unreachable states in a <selector>'
'StyleCycle: Looks for cycles in style definitions'
'InefficientWeight: Looks for inefficient weight declarations in LinearLayouts'
'NestedWeights: Looks for nested layout weights, which are costly'
'DisableBaselineAlignment: Looks for LinearLayouts which should set android:baselineAligned=false'
'Suspicious0dp: Looks for 0dp as the width in a vertical LinearLayout or as the height in a horizontal'
'Orientation: Checks that LinearLayouts with multiple children set the orientation'
'ScrollViewSize: Checks that ScrollViews use wrap_content in scrolling dimension'
'Deprecated: Looks for usages of deprecated layouts, attributes, and so on.'
'ObsoleteLayoutParam: Looks for layout params that are not valid for the given parent layout'
'MergeRootFrame: Checks whether a root <FrameLayout> can be replaced with a <merge> tag'
'NestedScrolling: Checks whether a scrolling widget has any nested scrolling widgets within'
'ScrollViewCount: Checks that ScrollViews have exactly one child widget'
'AdapterViewChildren: Checks that AdapterViews do not define their children in XML'
'UseCompoundDrawables: Checks whether the current node can be replaced by a TextView using compound drawables.'
'UselessParent: Checks whether a parent layout can be removed.'
'UselessLeaf: Checks whether a leaf layout can be removed.'
'TooManyViews: Checks whether a layout has too many views'
'TooDeepLayout: Checks whether a layout hierarchy is too deep'
'GridLayout: Checks for potential GridLayout errors like declaring rows and columns outside the declared grid dimensions'
'DalvikOverride: Looks for methods treated as overrides by Dalvik'
'OnClick: Ensures that onClick attribute values refer to real methods'
'ViewTag: Finds potential leaks when using View.setTag'
'DefaultLocale: Finds calls to locale-ambiguous String manipulation methods'
'SimpleDateFormat: Using SimpleDateFormat directly without an explicit locale'
'Registered: Ensures that Activities, Services and Content Providers are registered in the manifest'
'MissingRegistered: Ensures that classes referenced in the manifest are present in the project or libraries'
'Instantiatable: Ensures that classes registered in the manifest file are instantiatable'
'InnerclassSeparator: Ensures that inner classes are referenced using $ instead of . in class names'
'MissingId: Ensures that XML tags like <fragment> specify an id or tag attribute'
'WrongCase: Ensures that the correct case is used for special layout tags such as <fragment>'
'HandlerLeak: Ensures that Handler classes do not hold on to a reference to an outer class'
'ValidFragment: Ensures that Fragment subclasses can be instantiated'
'ExtraTranslation: Checks for translations that appear to be unused (no default language string)'
'MissingTranslation: Checks for incomplete translations where not all strings are translated'
'HardcodedText: Looks for hardcoded text attributes which should be converted to resource lookup'
'EnforceUTF8: Checks that all XML resource files are using UTF-8 as the file encoding'
'MangledCRLF: Checks that files with DOS line endings are consistent'
'EasterEgg: Looks for hidden easter eggs'
'StopShip: Looks for comment markers of the form "STOPSHIP" which indicates that code should not be released yet'
'Proguard: Looks for problems in proguard config files'
'ProguardSplit: Checks for old proguard.cfg files that contain generic Android rules'
'PxUsage: Looks for use of the "px" dimension'
'SpUsage: Looks for uses of "dp" instead of "sp" dimensions for text sizes'
'InOrMmUsage: Looks for use of the "mm" or "in" dimensions'
'SmallSp: Looks for text sizes that are too small'
'TextFields: Looks for text fields missing inputType or hint settings'
'TextViewEdits: Looks for TextViews being used for input'
'SelectableText: Looks for TextViews which should probably allow their text to be selected'
'UnusedResources: Looks for unused resources'
'UnusedIds: Looks for unused ids'
'ExtraText: Looks for extraneous text in layout files'
'PrivateResource: Looks for references to private resources'
'InconsistentArrays: Checks for inconsistencies in the number of elements in arrays'
'HardcodedDebugMode: Checks for hardcoded values of android:debuggable in the manifest'
'ManifestOrder: Checks for manifest problems like <uses-sdk> after the <application> tag'
'UsesMinSdkAttributes: Checks that the minimum SDK and target SDK attributes are defined'
'MultipleUsesSdk: Checks that the <uses-sdk> element appears at most once'
'WrongManifestParent: Checks that various manifest elements are declared in the right place'
'DuplicateActivity: Checks that an activity is registered only once in the manifest'
'OldTargetApi: Checks that the manifest specifies a targetSdkVersion that is recent'
'AllowBackup: Ensure that allowBackup is explicitly set in the applications manifest'
'UniquePermission: Checks that permission names are unique'
'MissingVersion: Checks that the application name and version are set'
'IllegalResourceRef: Checks for resource references where only literals are allowed'
'ExportedContentProvider: Checks for exported content providers that do not require permissions'
'ExportedService: Checks for exported services that do not require permissions'
'ExportedReceiver: Checks for exported receivers that do not require permissions'
'GrantAllUris: Checks for <grant-uri-permission> elements where everything is shared'
'WorldReadableFiles: Checks for openFileOutput() and getSharedPreferences() calls passing MODE_WORLD_READABLE'
'WorldWriteableFiles: Checks for openFileOutput() and getSharedPreferences() calls passing MODE_WORLD_WRITEABLE'
'SecureRandom: Looks for suspicious usage of the SecureRandom class'
'GifUsage: Checks for images using the GIF file format which is discouraged'
'IconDensities: Ensures that icons provide custom versions for all supported densities'
'IconMissingDensityFolder: Ensures that all the density folders are present'
'IconDipSize: Ensures that icons across densities provide roughly the same density-independent size'
'IconExpectedSize: Ensures that launcher icons, notification icons etc have the correct size'
'IconLocation: Ensures that images are not defined in the density-independent drawable folder'
'IconDuplicates: Finds duplicated icons under different names'
'IconDuplicatesConfig: Finds icons that have identical bitmaps across various configuration parameters'
'IconNoDpi: Finds icons that appear in both a -nodpi folder and a dpi folder'
'IconExtension: Checks that the icon file extension matches the actual image format in the file'
'IconColors: Checks that icons follow the recommended visual style'
'IconXmlAndPng: Finds icons that appear both as a drawable .xml file and as bitmaps'
'IconLauncherShape: Checks that launcher icons follow the recommended visual style'
'TypographyDashes: Looks for usages of hyphens which can be replaced by n dash and m dash characters'
'TypographyQuotes: Looks for straight quotes which can be replaced by curvy quotes'
'TypographyFractions: Looks for fraction strings which can be replaced with a fraction character'
'TypographyEllipsis: Looks for ellipsis strings (...) which can be replaced with an ellipsis character'
'TypographyOther: Looks for miscellaneous typographical problems like replacing (c) with Â©'
'ButtonOrder: Ensures the dismissive action of a dialog is on the left and affirmative on the right'
'ButtonCase: Ensures that Cancel/OK dialog buttons use the canonical capitalization'
'BackButton: Looks for Back buttons, which are not common on the Android platform.'
'ButtonStyle: Ensures that buttons in button bars are borderless'
'MissingPrefix: Detect XML attributes not using the Android namespace'
'Overdraw: Looks for overdraw issues (where a view is painted only to be fully painted over)'
'StringFormatInvalid: Checks that format strings are valid'
'StringFormatCount: Ensures that all format strings are used and that the same number is defined across translations'
'StringFormatMatches: Ensures that the format used in <string> definitions is compatible with the String.format call'
'Typos: Looks for typos in messages'
'WrongViewCast: Looks for incorrect casts to views that according to the XML are of a different type'
'SuspiciousImport: Checks for "import android.R" statements, which are usually accidental'
'WrongFolder: Finds resource files that are placed in the wrong folders'
'ViewConstructor: Checks that custom views define the expected constructors'
'LibraryCustomView: Flags custom attributes in libraries, which must use the res-auto-namespace instead'
'UnusedNamespace: Finds unused namespaces in XML documents'
'NamespaceTypo: Looks for misspellings in namespace declarations'
'AlwaysShowAction: Checks for uses of showAsAction="always" and suggests showAsAction="ifRoom" instead'
'MenuTitle: Ensures that all menu items supply a title'
'ResourceAsColor: Looks for calls to setColor where a resource id is passed instead of a resolved color'
'DrawAllocation: Looks for memory allocations within drawing code'
'UseValueOf: Looks for usages of "new" for wrapper classes which should use "valueOf" instead'
'UseSparseArrays: Looks for opportunities to replace HashMaps with the more efficient SparseArray'
'Wakelock: Looks for problems with wakelock usage'
'Recycle: Looks for missing recycle() calls on resources'
'CommitTransaction: Looks for missing commit() calls on FragmentTransactions'
'SetJavaScriptEnabled: Looks for invocations of android.webkit.WebSettings.setJavaScriptEnabled'
'ShowToast: Looks for code creating a Toast but forgetting to call show() on it'
'CommitPrefEdits: Looks for code editing a SharedPreference but forgetting to call commit() on it'
'CutPasteId: Looks for code cut & paste mistakes in findViewById() calls'
'UnlocalizedSms: Looks for code sending text messages to unlocalized phone numbers'
'PackagedPrivateKey: Looks for packaged private key files'
'LocalSuppress: Looks for @SuppressLint annotations in locations where it doesnt work for class based checks'
'ProtectedPermissions: Looks for permissions that are only granted to system apps'
'RequiredSize: Ensures that the layout_width and layout_height are specified for all views'
'WrongCall: Finds cases where the wrong call is made, such as calling onMeasure instead of measure'
    )
    ops=(
        '--help[Help message]'
        '--list[List the available issue ids and exit]:ids:(($ids))'   
        '--show[List available issues along with full explanations]:ids:($(ids))'   
        '--version[Version]'
        '--check[Issue ids]:ids:($(ids))'
        '--html[HTML output]'
        '--simplehtml[Simple HTML report]'
        '--xml[XML report]'
        '--quiet[Don'"'"'t show progress.]'
        '--exitcode[Set the exit code to 1 if errors are found.]'
        '--nowarn[Only check for errors (ignore warnings)]'
        '-Wall[Check all warnings, including those off by default]'
        '-Werror[Treat all warnings as errors]'
        '--config[config file (lint.xml will be failback)]'
    )
    _arguments -s \
        $ops[@] 
}

_lint "$@"
