#compdef adb
local ops

_adb() {
    ops=(
        '-d[directs command to the only connected USB device]'
        '-e[directs command to the only running emulator]'   
        '-s[<serial number>directs command by serial number]'
        '-p[<product name or path]'
    )
    _arguments -s \
        $ops[@]   \
        '*::adb command:_adb_command'
}

(( $+functions[_adb_command] )) ||
_adb_command() {
    local ret
    adb_cmds=(
        'push:<local> <remote> copy file/dir to device'
        'pull:<remote> <local>copy file/dir from device'
        'sync:<directory> copy host->device only if changed'
        'shell:run remote shell interactively'
        'emu:<command>run emulator console command'
        'logcat:<filter-spec> View device log'
        'forward:<local> <remote>'
        'devices:list all connected devices'
        'wait-for-device:block until device is online'
        'start-server:ensure that there is a server running'
        'kill-server:kill the server if it is running'
        'get-state:prints: offline | bootloader | device'
        'get-product:prints: <product-id>'
        'get-serialno:prints: <serial-number>'
        'status-window:continuously print device status for a specified device'
        'remount:remounts the /system partition on the device read-write'
        'help:show this help message'
        'version:show version num'
        'jdwp:list PIDs of processes hosting a JDWP transport'
        'install:push this package file to the device and install it'
        'uninstall:remove this app package from the device'
        'ppp:Run PPP over US'
        'reboot:reboots the device, optionally into the bootloader or recovery program'
        'reboot-bootloader:reboots the device into the bootloader'
        'root:restarts the adbd daemon with root permissions'
        'test:test'
    )


    # dispatch function
    if (( CURRENT == 1 )); then
        _describe -t adb-command 'adb command' adb_cmds 
    else
        local cmd=${words[1]}
        local curcontext="$curcontext"
        curcontext="${curcontext%:*:*}:adb-$cmd"
        _call_function ret _adb_command_$cmd || _message "no more arguments after $cmd"
    fi
    
    return ret
}

_vowel() {
    local xs
    xs=($(adb shell ls /))
    _multi_parts  " " xs
}

# 仅供测试使用
_adb_command_test() {
    local dirs
    dirs=(/usr)
    array=(a b c)
    ops=(
        '(--directory -d)'{--directory=OPT,-d}'['目录']:输入一个目录:_path_files -W ~'
        '--so:共享库:_path_files -W (/tmp /usr)'
        '-file:文件:_files -g "*.txt"'
        '-c:元音:_vowel'
    )
    

    _arguments -s $ops[@]      
    # _values -w "选项" 'name['名字']:file:'
    return 0
}

# adb install
_adb_command_install() {
    ops=(
        '(-r)-l+[forward-lock the app]'
        '(-l)-r+[reinstall the app, keeping its dat]'
        ':apk file:_files -g \*.apk'
    )
    _arguments -s \
        $ops[@]   
    return 0
}

# adb push
_adb_command_push() {
    ops=(
        ':apk file:_files -g \*'
    )
    _arguments -s \
        $ops[@]
}

# adb shell
_adb_command_shell() {
    adb_shell_cmds=(
        'am:am'
        'pm:pm'
    )
    # _arguments -s \
    #     '*:adb command:(ls logcat)'
    if (( CURRENT == 2 )); then
        _describe -t adb-shell-command 'adb shell command' adb_shell_cmds 
    else
        local cmd=${words[2]}
        local curcontext="$curcontext"
        curcontext="${curcontext%:*:*}:adb-shell-$cmd"
        _call_function ret _adb_shell_command_$cmd || _message "no more arguments after $cmd"
    fi 
}


# adb shell am
_adb_shell_command_am() {
    local ret
    ops=(
        '-o[Specifies where to create the files/folders]'
        '-i[install someplace else, like /mnt]:Root directory:_path_files -/'
        '-infobox[use dialog to draw an info box]'
        '-menu[confirm package installation with a menu]'
    )
 
    adb_shell_am_cmds=(
        'start:start with intent'
        'startservice:start service with intent'
        'force-stop:force stop everything associated with <PACKAGE>'
        'kill:kill all processes associated with <PACKAGE>. (Only kills. processes that are safe to kill)'
        'kill-all:kill all background processes'
        'broadcast:send broadcast intent'
        'instrument:start an Instrumentation'
        'profile:start and stop profiler on a process'
        'dumpheap:dump the heap of a process'
        'set-debug-app:set application <PACKAGE> to debug'
        'clear-debug-app:clear the previously set-debug-app'
        'monitor:start monitoring for crashes or ANRs'
        'screen-compat:control screen compatibility mode of <PACKAGE>'
        'display-size:override display size'
        'to-uri:print the given Intent specification as a URI'
        'to-intent-uri:print the given Intent specification as an intent: URI'
    )

    if (( CURRENT == 3 )); then
        _describe -t adb-shell-am 'adb shell am' adb_shell_am_cmds
    else
        local cmd=${words[3]}
        local curcontext="$curcontext"
        curcontext="${curcontext%:*:*}:adb-shell-am-$cmd"
        _call_function ret _adb_shell_am_$cmd || _message "no more arguments after $cmd"
    fi
    return ret
}

_adb_shell_am_start() {
    ops=(
        ':This is first arguments:_files -g \*.apk'
        # '-D[enable debugging]'
        # '--start-profiler[start profiler and send results to <FILE>]'
        # '-P[like above, but profiling stops when app goes idle]'
        # '-R[repeat the activity launch <COUNT> times. Prior to each repeat, the top activity will be finished]'
        # '-S[force stop the target app before starting the activity]'
        # '-W[wait for launch to complete]'
        # '--opengl-trace[enable tracing of OpenGL functions]'
        # ':apk file:_files -g \*.apk'
    )
    # _arguments -s \
    #     $ops[@]  
    
    _arguments \ 
    -a\ 
    -c\ 
    -d\ 
    ':arg:(x2 y2)'
    return 0
}

_adb_shell_am_startservice() {

}

# am force-stop <package>
_adb_shell_am_force-stop() {
    # echo xxx
    # _arguments -C -s  '-D[enable debugging]' ':host:_hosts' ':port:_ports' && return 0
     # _arguments -C -s '*:file:_files'
     _arguments -C -s '*:host:_hosts' 
     return 0
}

_adb_shell_am_kill() {
}

_adb_shell_am_kill-all() {
}
_adb_shell_am_broadcast() {
}
_adb_shell_am_instrument() {
}
_adb_shell_am_profile() {
}
_adb_shell_am_dumpheap() {
}
_adb_shell_am_set-debug-app() {
    ops=(
        '-n[dump native heap instead of managed heap]'
        ':apk file:_files -g \*.apk'
    )
    _arguments -s \
        $ops[@]   
    return 0
}

# am set-debug-app <package>
_adb_shell_am_clear-debug-app() {
    ops=(
        '-w[wait for debugger when application starts]'
        '--persistent[retain this value]'
        ':apk file:_files -g \*.apk'
    )
    _arguments -s \
        $ops[@]   
    return 0
}

# am monitor: start monitoring for crashes or ANRs.
_adb_shell_am_monitor() {
    ops=(
        '--gdb[start gdbserv on the given port at crash/ANR]'
        ':apk file:_files -g \*.apk'
    )
    _arguments -s \
        $ops[@]   
    return 0
}
_adb_shell_am_screen-compat() {
}
_adb_shell_am_display-size() {
}
_adb_shell_am_to-uri() {
}
_adb_shell_am_to-intent-uri() {
}

# _android_tools() {
#     if (( CURRENT > 2 )); then
#         local cmd=${words[2]}
#         curcontext="${curcontext%:*:*}:adb-$cmd"
#         (( CURRENT--))
#         shift words
#         _android_tools_adb_$cmd
#     else
#         local -a cmdlist=(shell install)
#         _describe -t adb-commands $cmdlist
#     fi
# }

# adb shell
_android_tools_adb_shell() {
    ops=(
        '-o[Specifies where to create the files/folders]'
        '-i[install someplace else, like /mnt]:Root directory:_path_files -/'
        '-infobox[use dialog to draw an info box]'
        '-menu[confirm package installation with a menu]'
    )
    _arguments -s \
        $ops[@] \
        '*:adb packages:_files -g \*.apk'
}

# init at latst
_adb "$@"
