#!/bin/zsh

function help() {
    print '

VARIABLES:
 * GS : group start
 * GE : group end
 * AS : attribute start
 * AE : attribute end
FIXME:
CALLBACKS:
'
}

flags=()
zparseopts -A opts -K -D -E -- p=flags


spec="$(<&0)"

function msg() {
    echo "[@layout]: $FG[white]$argv$TG"
}

if [[ -n $flags[(r)-p] ]]; then
    typeset -gA fmap
    fmap[new-atom]=printAtom
fi

    # group start / end
GS=${GS:='{'}
GE=${GE:='}'}
    # attributes start / end
AS=${AS:='['}
AE=${AE:=']'}
local -ri TRUE=1

    # padding char
PC=' '
    # shift width
SW=2
context=()

function padding() {
    local pc=
    for (( i=0; i<$1*SW; ++i )); do
        pc+=$PC
    done
    echo $pc
        # another way of repeating char
        # printf "$PC%.4s" {1..$1}
}

function printAtom() {
    # echo "$(padding $LEVEL)$ATOM [$ATTRS]"
    echo "$context | $ATOM [$ATTRS]"
}

function @call() {
    local fname=$1 && shift
    [[ ${(t)fmap} == association ]] && [[ -n $fmap[$fname] ]] && $fmap[$fname]  $*
}

function layout() {
    [[ -z $argv ]] && return
    stop=
    ATOM=
    spec="$argv"
    SIZE=$#spec
    ATOM=
    ch=
    integer LEVEL=0
    context=($context[1])
    # (( context[LEVEL+1]+=1 ))

    
    function @changeContext() {
        (( context[LEVEL+1]+=1 ))
        context=($context[1,LEVEL+1])
    }

    function @newAtom() {
        [[ $1 != LAST ]] && @changeContext
        if [[ -n $ATOM ]]; then
            @call new-atom $1
            ATOM=
        fi
        return 0
    }

    function @newAtomWithAttrs() {
        local ATTRS=
        local -i M

        
        if [[ -n $ATOM ]]; then
            @changeContext

            (( M=I+1 ))
            while (( m<SIZE )); do
                [[ $spec[M] == $AE ]] && break
                ATTRS+=$spec[M]
                (( M++ ))
            done
            @call new-atom
            ATOM=
            if (( M >= SIZE )); then
                print -u2 "missing ']' at line '$X' attrs $ATOM" 
                stop=true
                return 0
            fi
            I=M
        fi        
        return 0
    }
    
    for (( I=1; I<=SIZE; ++I )); do
        ch=$spec[I]
        [[ -n $stop   ]] && return
        [[ $ch == $GS ]] && @newAtom LAST && (( LEVEL++, TRUE )) && @newAtom  && continue
        [[ $ch == ' ' ]] && @newAtom  && continue
        [[ $ch == $GE ]] && @newAtom  && (( LEVEL--, TRUE )) && continue
        [[ $ch == $AS ]] && @newAtomWithAttrs && continue
        ATOM+=$ch
    done
    (( LEVEL )) && msg "missing ctrl [$level] !!!"
}

local LINE
@call create
for LINE in "${(@f)spec}"; do
    layout $LINE
done
@call finish

