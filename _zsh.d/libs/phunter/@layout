#!/bin/zsh
(
    function help() {
        print '

VARIABLES:
 * GS : group start
 * GE : group end
 * AS : attribute start
 * AE : attribute end

CALLBACKS:
 * onNewAtom 
   * $1 : atom name
   * context
   * ATOM: current ATOM
 * onNewAttrs
   * $1 : attributes strings clients should parse it by self
   * context
   * ATOM: current ATOM
context:
 * the context is array to store the structure of documents
 * the member of context are sequence of integer
 * 1   : the first atom
 * 1 1 : the first child of the first atom
 * $#context: the level of the current atom

'
    }

    spec="$(<&0)"

    function msg() {
        echo "[@layout]: $FG[white]$argv$TG"
    }

    # group start / end
    GS=${GS:='{'}
    GE=${GE:='}'}
    # attributes start / end
    AS=${AS:='['}
    AE=${AE:=']'}
    local -ri TRUE=1

    # padding char
    PC=' '
    # shift width
    SW=2
    context=()

    function padding() {
        pc=
        for (( i=0; i<$1*SW; ++i )); do
            pc+=$PC
        done
        echo $pc
        # another way of repeating char
        # printf "$PC%.4s" {1..$1}
    }
    
    function onNewAtom() {
        print -u2 "$context | $1"
    }

    function onNewAttrs() {
        print -u2 "$context | $ATOM $1"
    }

    function layout() {
        [[ -z $argv ]] && return
        stop=
        ATOM=
        spec="$argv"
        size=$#spec
        atom=
        ch=
        integer level=0
        context=(0)
        (( context[level+1]+=1 ))

        
        function newAtom() {
            if [[ -n $atom ]]; then
                atoms+=$atom
                (( context[level+1]+=1 ))
                ATOM=$atom
                onNewAtom $atom
                atom=
            fi
            return 0
        }

        function newAttrs() {
            local attrs=
            local -i m
            (( m=i+1 ))
            while (( m<size )); do
                [[ $spec[m] == $AE ]] && break
                attrs+=$spec[m]
                (( m++ ))
            done
            
            if (( m >= size )); then
                print -u2 "missing ']' at line '$x' attrs $ATOM" 
                stop=true
                echo 0
                return
            fi

            onNewAttrs $attrs > /dev/null
            echo $(( m-i ))
        }
          
        for (( i=1; i<=size; ++i )); do
            ch=$spec[i]
            [[ -n $stop   ]] && return
            [[ $ch == $GS ]] && (( level++, TRUE )) && newAtom  && continue
            [[ $ch == $GE ]] && newAtom  && (( level--, TRUE )) && continue
            [[ $ch == ' ' ]] && newAtom  && continue
            [[ $ch == $AS ]] && newAtom  && (( i+=$(newAttrs), TRUE )) && continue
            atom+=$ch
        done
        (( level )) && msg "missing ctrl [$level] !!!"
    }
    
    local x
    for x in "${(@f)spec}"; do
        layout $x
    done
)
