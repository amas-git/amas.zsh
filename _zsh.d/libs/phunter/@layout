#!/bin/zsh

function help() {
    print '

VARIABLES:
 * GS : group start
 * GE : group end
 * AS : attribute start
 * AE : attribute end
FIXME:
CALLBACKS:
'
}
zmodload zsh/mathfunc
flags=()
zparseopts -A opts -K -D -E -- p=flags


spec="$(<&0)"

function msg() {
    echo "[@layout]: $FG[white]$argv$TG"
}

if [[ -n $flags[(r)-p] ]]; then
    typeset -gA fmap
    fmap[new-atom]=printAtom
fi

    # group start / end
GS=${GS:='{'}
GE=${GE:='}'}
    # attributes start / end
AS=${AS:='['}
AE=${AE:=']'}
local -ri TRUE=1

    # padding char
PC=' '
    # shift width
SW=2
context=()

function padding() {
    local pc=
    for (( i=0; i<$1*SW; ++i )); do
        pc+=$PC
    done
    echo $pc
        # another way of repeating char
        # printf "$PC%.4s" {1..$1}
}

function printAtom() {
    # echo "$(padding $LEVEL)$ATOM [$ATTRS]"
    # echo "$context | $ATOM [$ATTRS]"
}

function @CALL() {
    local fname=$1 && shift
    [[ ${(t)fmap} == association ]] && [[ -n $fmap[$fname] ]] && $fmap[$fname]  $*
}

function @LAYOUT() {
    [[ -z $argv ]] && return
    stop=
    ATOM=
    ATOMS=()
    spec="$argv"
    SIZE=$#spec
    ch=
    integer LEVEL=1
    # context=($context[1])
    # (( context[LEVEL+1]+=1 ))

    
    function @changeContext() {
        (( context[LEVEL+1]+=1 ))
        context=($context[1,LEVEL+1])
    }

    function @newAtom() {
        [[ $1 != LAST ]] && @changeContext
        if [[ -n $ATOM ]]; then
            @call new-atom $1
            ATOM=
        fi
        return 0
    }

    function @newAtomWithAttrs() {
        local ATTRS=
        local -i M

        
        if [[ -n $ATOM ]]; then
            @changeContext

            (( M=I+1 ))
            while (( m<SIZE )); do
                [[ $spec[M] == $AE ]] && break
                ATTRS+=$spec[M]
                (( M++ ))
            done
            @call new-atom
            ATOM=
            if (( M >= SIZE )); then
                print -u2 "missing ']' at line '$X' attrs $ATOM" 
                stop=true
                return 0
            fi
            I=M
        fi        
        return 0
    }

    function @CTXCHANGE() {
        local TAG="$1"; shift
        [[ $TAG == ATOM ]] && @CALL new-atom "$argv[2,-1]" "$argv[1]" && return
        printf '%4d' $*; echo
    }

    function @LPAREN() {
        (( ++LEVEL ))
        (( context[LEVEL]=abs(context[LEVEL])+1 ))
        
        # context=($context[1,LEVEL])
        # echo "::: $context"
        @CTXCHANGE LPAREN $context[1,LEVEL]
    }

    function @RPAREN() {
        (( context[LEVEL]=-context[LEVEL] ))
        @CTXCHANGE RPAREN $context[1,LEVEL]
        context[LEVEL+1]=
        (( --LEVEL ))    
    }
    
    function @IS_SPACE() {
        if [[ $* == ' ' ]]; then
            return 0
        else
            return 1
        fi
    }

    function @CREATE_ATOM() {
        local atom
        while (( I < SIZE )) ; do
            CH=$spec[I]
            atom+=$CH
            NT=$spec[I+1]
            @IS_SPACE $NT    && break
            [[ $NT == $GS ]] && break
            [[ $NT == $GE ]] && break
            (( ++I ))
        done
        [[ -z $atom ]] && return
        
        # create new atom
        (( context[LEVEL+1]=abs(context[LEVEL+1])+1 ))
        @CTXCHANGE ATOM "$atom" $context[1,LEVEL+1]
    }


    
    for (( I=1; I<=SIZE; ++I )); do
        CH=$spec[I]
  
        @IS_SPACE $CH    && continue
        [[ $CH == $GS ]] && @LPAREN && continue
        [[ $CH == $GE ]] && @RPAREN && continue
        @CREATE_ATOM
        # [[ $ch == $GS ]] && @newAtom LAST && (( LEVEL++, TRUE )) && @newAtom  && continue
        # [[ $ch == ' ' ]] && @newAtom  && continue
        # [[ $ch == $GE ]] && @newAtom  && (( LEVEL--, TRUE )) && continue
        # [[ $ch == $AS ]] && @newAtomWithAttrs && continue
        # ATOM+=$ch
    done
    (( LEVEL != 1 )) && msg "missing ctrl [$level] !!!"
}

local LINE
@CALL create
for LINE in "${(@f)spec}"; do
    @LAYOUT $LINE
done
@CALL finish

