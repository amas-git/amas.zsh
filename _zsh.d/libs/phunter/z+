#!/bin/zsh
(
function D() {
    print -u2 ${FG[white]}$*
}

function @z() {
    local _source
    local -a estack
    

    integer lc=0 

    function dump() {
        for x in $estack; do
            D " --: " + $x
        done
    }

    function @e() {
        local sh
        sh="$(<&0)"
        eval "$sh"
    }

    function @() {
        (
            local sh
            sh="$(<&0)"
            [[ -z $sh ]] && return
            print "${(e)sh}"
        )
    }

    function @stop() {
        exit
    }

    function @if() {
        eval "$*" && {
            skip=
            @
        } || {
            skip=true
        }
        # echo "      $* -> $skip"
    }

    skip=
    
    function zeval() {
        [[ -n $estack ]] && {
            <<< ${(F)estack[2,-1]} | eval "$estack[1]"
            estack=()
        }

        estack=($argv)
        D " +C: $1"
        D " +P: $2"
    }

    [[ -n $1 ]] && {
        _source="$(<$1)"
    } || {
        _source="$(<&0)"
    }
    
    NEXT_MATCH='(^#-{4,120}\|)(\s*)(@\w*|\[\[)(.*$)'
    estack=(@)
    for line in "${(@f)_source}"; do
        (( lc++ ))

        # instruction
        if [[ $line =~ $NEXT_MATCH ]]; then
            zeval ${match[3]:=@} ${match[4]}
            continue
        fi
        
        [[ -n $estack ]] && {  
            estack+=$line
        } || {
            estack=(@)
        }
    done
    zeval
}

@z $*
)
