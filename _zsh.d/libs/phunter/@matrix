#!/bin/zsh
#
# @matrix header=a:b:c:d
TEST_MATRIX='
[NAMES]
NAME AGE SEX
amas 19
wang 这个

[MENUS]
ID TITLE DESC
delete "add nihao"
add    delete 这个
'
# MAGIC HEADER(F1:F2:...:Fn) DIM(MxN)
MATRIX_MAGIC=@MATRIX

function main() {
    local content="$(<&0)"
    # local content=$TEST_MATRIX
   
    local fsep='\n'
    local lsep="\n"
    local -a contents
    local -a header
    contents=(${(f)content})

    local matrix_name
    local -a matrix_contents
    local -a matrix_header

    function read_matrix() {
 

        matrix_header=(${(s: :)matrix_contents[1]})
        local vname=$matrix_name
        local -a xs
        local line
        typeset -ga $vname
        local -i len=$#matrix_header 
        
        # print "(read) > $matrix_name"
        # print "       > HEADER=$len"

        set -A $vname $MATRIX_MAGIC $len $matrix_header
        for line in $matrix_contents[2,-1];do
            xs=(${(z)line})
            repeat $((len-$#xs)) { xs+= }
            set -A $vname "${(@P)vname}" "${(@)xs}"
        done

        #typeset -p $matrix_name
        #print_matrix $vname
       
        matrix_contents=()
    }

    function print_matrix() {
        local _name=$1
        local _col=${${(P)_name}[2]}
        typeset -p $_name
        eval "print -aC $_col "'"${(@)'$_name"[3,-1]}\""
        # 上面这个太难懂了,参考下面这句
        #print -aC $matrix "${(@)matrix[3,-1]}"
    }

    for line in $contents; do
        # skip comment
        [[ $line =~ '^#.*' ]] && continue
        if [[ $line =~ '\[([a-Z_]+)\]' ]]; then
            [[ -n $matrix_contents ]] && {
                read_matrix
            }
            matrix_name=$match[1]
        else
           [[ -n $matrix_name ]] && {
               matrix_contents+=$line
           }
        fi
    done

    [[ -n $matrix_contents ]] && {
        read_matrix
    }
}

function ismatrix() {
    local vname=$1
    [[ ${(tP)vname} == array ]] && [[ ${${(P)vname}[1]} == $MATRIX_MAGIC ]] && (( ${(P)#vname} >= 3 )) && return 0
    return 1
}

main $*
