#!/bin/zsh
# alias
alias dict='typeset -gA'
readonly PH="__PH2017__" # PH MAIN TREE CONTEXT PREFIX
readonly PH_SEP="Îž"       # PH MAIN TREE CONTEXT SEPERATOR

(
function D() {
    print -u2 ${FG[white]}$*"$terminfo[sgr0]"
}

# mainTree created by @main command, it is
# human f<F4>
dict mainTree
dict funcMaps # Function Table

function @z() {
    local _source
    local -a estack
    

    function dump() {
            # D ""
            # D "     PC : $pc"
            # D "     [*]: $estack[1]"
            # D "     [1]: $1$2"
            # D "     {{{"
            # D "         ${(F)estack[2,-1]} "
            # D "     }}}"
    }

    function @() {
        local sh
        sh="$(<&0)"
        [[ -z $sh ]] && return
        print "${(e)sh}"   
    }

    

    function @i() {
            # skip interactive mode
        [[ -n $flags[(r)-I] ]] && return
        local content="$(<&0)"
        eval "$(<<< ${(e)content} | vipe)"
    }

    function @ii() {
        local content="$(<&0)"
        <<< $content | vipe
    }

    function @e() { local sh; sh="$(<&0)" ; eval "$sh"}
    function @as() {  typeset -g ${1:=_as}="$(<&0)" }
    function @echo() { local content="$(<&0)" && <<< ${(e)content} }
    function @append() { local content="$(<&0)" && set -A $1 "${(@P)1}" "${content}" }
    function @null() {}
    function @stop() { exit }

    function @function() {
        local name
        local params
        local body

        # Function BODY
        body="$(<&0)"

        # Function NAME
        name=$1
        
        # Function PARAMS

        eval "function $name() {
            local content=
            print ${} 
        }"
    }

    function @tree() {
        local name="TREE"
        local content="$(<&0)"
        local -a lines nodes
        local context
        typeset -A $name

        function getParent() {
            local p
            [[ -z $nodes ]] && return
            for x in {$1..0}; do
                p=$nodes[$x]
                [[ -n $p ]] && break
            done
            print  "$p"
        }
       


        lines=(${(@f)content})
        for ((i=1; i<$#lines; ++i)) do
            local line=$lines[i]
            local -i level
            level=0

            if [[ $line =~ '^([#]+)\s+(.*)$' ]]; then
                name=$match[2]
                level=$#match[1]
                context=$(getParent $level)/$name 
                nodes[level+1]=$context
                print -- $name $level $context
            else if [[ $line =~ '\s+\*\s+([^:]+):(.*)' ]]
                print -- $match[1]
            fi
        done
    }

    # create mainTree
    # TODO: delete this
    function @main() {
        local content="$(<&0)"
        local line
        local context=
        local -i level=0
        local key
        local parent
        local -a nodes

        function getParent() {
            local p
            [[ -z $nodes ]] && return
            for x in {$1..0}; do
                p=$nodes[$x]
                [[ -n $p ]] && break
            done
            print  "$p"
        }
       

        for line in "${(@f)content}"; do
            # skip comment line OR empty line
            [[ $line =~ '(^#.*$)|(^\s*$)' ]] && continue
            key=

            if [[ $line =~ '(^\s*)([-])(\s*)([^:]*)[:](\s*)(.*$)' ]]; then
                key=$match[4]
                level=$#match[1]
                parent=$(getParent $level) 
                context=$parent/$key
                nodes[level+1]=$context

                print $context "'$key' = '$match[6]'"
                mainTree[$context]=$match[6]
                contextId=${context//\//$PH_SEP}
                #print $contextId
                typeset -g $contextId=$match[6]
            else 
                # TODO: GOOD ERROR MESSAGE
                print -- "WARN: create mainTree failed '$line'"
            fi
        done
    }

    function @match() {
        #typeset -m "$PH_SEP"'*'
    }

    skip=
    function @if() {
        eval "$*" && {
            skip=
            estack=(@)
        } || {
            skip=true
        }
    }



   function zeval() {
       set "${match[3]}" "${match[4]}"
       [[ -n $estack ]] && {
           <<< ${(F)estack[2,-1]} | eval "$estack[1]"
           estack=()
       }

       estack=(${1:=@}$2)
   }

   [[ -n $1 ]] && {
       [[ -f $1 ]] || return
       _source="$(<$1)" && shift
   } || {
       _source="$(<&0)"
   }
   
   estack=(@)
   local -a _chunks
   _chunks=(${(@f)_source})

   for ((i=1; i<=$#_chunks; ++i)); do
       _line=$_chunks[i]
       if [[ $_line =~ '(^#-{4,120}[\|-])(\s*)([@][a-ZA-Z0-9]+)(.*$)' ]]; then
          _command=$match[3] 
          print $_command
       else
           [[ -n $estack ]] && {  
               estack+=$line
           }
       fi
   done
   zeval
}

@z $*
)

