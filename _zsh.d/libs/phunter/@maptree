#!/bin/zsh
(
function init() {
   [[ -f $map ]] && rm $map

   echo $map
   touch $map
   cat $map
}

function sync() {
    typeset -p  kset  >  $map
    typeset -p  vset  >> $map
    typeset -p  aset  >> $map
    typeset -p  mset  >> $map
    typeset -p  tset  >> $map
    typeset -p  ccset >> $map
    typeset -p  ctset >> $map
}

function del() {
    local k=$1
    
    typeset -a kset
    typeset -a vset
    source $map

    integer i=$kset[(i)$k]
    (( i == $#kset+1 )) && {
        return 1 
    }

    kset[i]=()
    vset[i]=()

    sync
}

function get() {
    local k=$1
    typeset -a kset
    typeset -a vset
    source $map

    echo $vset[$kset[(i)$k]]  
}

function dump() {
    typeset -a kset
    typeset -a vset
    source $map

    for k in $kset; do
        echo "$k=$vset[kset[(i)$k]]"
    done
}

function put() {
    function pute() {
        integer i="$kset[(i)$1]"
        if (( $i == $#kset + 1 )); then
            kset+="$1"
            vset+="$2"
        else
            vset[$i]=$2
        fi
    }

    function puta() {
        local -a xs
        xs=(${(s: :)aset[@keyset:$k]})
        xs+=$1
        xs=(${(u)xs})
        aset[@keyset:$k]=$xs
        aset[${k}/@$1]=$2
    }
    
    local k=$1 && shift
    local v=$1 && shift


    source $map
    pute $k $v

    integer i
    for x in $argv; do
        i=${x[(i)=]}         
        puta "$x[1,i-1]" "$x[i+1,-1]"
    done
    
    sync
}

function geta() {
    local k=$1
    local n=$2
    local -a xs
    
    [[ -z $k ]] && return

    source $map
    xs=(${(s: :)aset[@keyset:$k]})

    [[ -n $n ]] && {
        if [[ -n $xs[(r)$n] ]]; then 
            echo $aset[$k/@$n]
        fi
        return
    }

    for x in $xs; do
        echo $x
        echo $aset[$k/@$x]
    done
}

function instance() {
    local node=$1
    local level=$2
    local -a subnode
    local -a children
    # expose attrs
    for attr in ${(s: :)aset[@keyset:$node]}; do
        local $attr=$aset[$node/@$attr]
    done

    # eval children
    for child in $kset; do
        [[ $(dirname $child) == $node ]] && {
            subnode+="$(instance $child $[level+1])"
        }
    done

    integer __i
    for m in $mset; do
        __i=$(( __i+1 ))
        [[ $node =~ $m ]] && {
            template=${tset[__i]]}
            echo ${(e)template}
            return
        }
    done
    template=$subnode
    echo ${(e)template}
}

function if() {
    local template="$(<&0)"
    local condition="$1"
    source $map

    ccset+=$condition
    ctset+=$template

    sync
}


function match() {
    zparseopts -A _opts -K -D -- h=_flags c=_flags 
    local template="$(<&0)"
    source $map

    [[ -n $_flags[(r)-c] ]] && {
        mset=()
        tset=()
    }

    mset+=$1
    tset+=$template
    sync
}

function extend() {
    source $map

    local node=$1
    local level=${2:=0}
    local -a subnode
    # expose attrs
    for attr in ${(s: :)aset[@keyset:$node]}; do
        local $attr=$aset[$node/@$attr]
    done

    # eval children
    for child in $kset; do
        [[ $(dirname $child) == $node ]] && {
            subnode+="$(extend $child $[level+1])"
        }
    done

    integer __i=0
    for c in $ccset; do
        __i=$(( __i+1 ))
        eval "$c" && {
            template=$ctset[__i]
            echo ${(e)template}
            return
        }
    done
    template=$subnode
    echo ${(e)template}
}

function e() {
    source $map
    instance $1 0 
}

function eq() {
    source $map
}

function w() {
    source $map
    local node=
    local attr=
    local template=

    for node in $kset; do
        integer __i=0
        for m in $mset; do
            __i=$(( __i+1 ))
            [[ $node =~ $m ]] && {
                # expose attrs
                for attr in ${(s: :)aset[@keyset:$node]}; do
                    local $attr=$aset[$node/@$attr]
                done

                template=$tset[__i]
                echo ${(e)template}
                break
            }
        done
    done
}

function walk() {
    local template="$(<&0)"
    source $map
    integer __i=0
    for node in $kset; do
        # expose attrs
        for attr in ${(s: :)aset[@keyset:$node]}; do
            local $attr=$aset[$node/@$attr]
        done

        eval "$1" && {
            echo ${(e)template}
        }
    done
}

#~~
local _template=
#"$(<&0)"
local _pattern=
local -a _cmds
_cmds=(walk if init put get del e w dump getai match nz extend)

local _storage=/tmp/.phunter/@maptree

[[ -d $_storage ]] || mkdir -p $_storage


local _cmd=$1; shift
typeset -A _opts
typeset -a _flags
#zparseopts -A _opts -K -D -- h=_flags m:=_opts s:=_opts

local _name=default.map
local map=$_storage/$_name


_pattern=$_opts[-m]


typeset -a kset
typeset -a vset
typeset -A aset
typeset -a mset
typeset -a tset

typeset -a ccset
typeset -a ctset

# dispatcher
[[ -n $_cmds[(r)$_cmd] ]] && {
    $_cmd "$@"
}

)

HELP="
@maptree [${(j:|:)_cmds}]
"
