#!/bin/zsh

function main() {
    help() {
        print """\
Add intent-filter to specify android component.
$ cat AndroidManifest.xml | android.xml.addIntentFilter <component-name>  -a android.intent.action.MAIN -c android.intent.category.LAUNCHER -d 'android:mimeType=text/*'
optons: 
    -a: action-name
    -c: category-name
    -d: data 'attr1=value1 attr2=value2 ... attr3=value3'
        attr should be one of:
        - android:mimeType
        - android:host
        - android:scheme
        - android:port
        - android:path
        - android:pathPrefix
        - android:pathPattern
    -D: as main entrance of application. (equivalent '-a android.intent.action.MAIN  -c android.intent.category.LAUNCHER')
    -h: show this help
"""
    }

    local -a opts actions categorys dataspecs
    [[ -z $argv || $argv = '-h' ]] && help && return
    local componentName="$1"; shift
    local target="/manifest/application/*[(local-name()='activity' or local-name()='receiver') and (@android:name='$componentName')]"
    local targetIntentFilter manifest elemId

    zparseopts -K -- a+:=actions c+:=categorys d+:=dataspecs h=opts D=opts 
    [[ -n $opts[(r)-h] ]] && help && return

    @IF "actions  : $actions"
    @IF "categorys: $categorys"
    @IF "dataspecs: $dataspecs"
    @IF "opts     : $opts"

    elemId=$(uuid)
    targetIntentFilter="//intent-filter[@_id='$elemId']"
    # +element: intent-filter
    manifest=$(newElement "$target" -name intent-filter _id=$elemId)
    
    # handle single options
    [[ -n $opts[(r)-D] ]] && actions+=(-a "android.intent.action.MAIN") && categorys+=(-c "android.intent.category.LAUNCHER")
    
    # +element: action
    for x in ${(u)actions}; do
        [[ $x = "-a" ]] && continue
        manifest=$(echo "$manifest" | newElement "$targetIntentFilter" -name action android:name="$x")
    done

    # +element: category
    for x in ${(u)categorys}; do
        [[ $x = "-c" ]] && continue
        manifest=$(echo "$manifest" | newElement "$targetIntentFilter" -name category android:name="$x")
    done

    # +element: data
    # FIXME(amas): for data spec, the same attributes with different order may case output duplicate attributes
    for x in ${(u)dataspecs}; do
        [[ $x = "-d" ]] && continue
        manifest=$(echo "$manifest" | newElement "$targetIntentFilter" -name data ${=x})
    done
    <<< "$manifest" | xml ed -d "//@_id"
}

main $*
