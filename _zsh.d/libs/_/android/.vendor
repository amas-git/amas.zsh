#!/bin/zsh
#------------------------------------------------------------------------[ ZCG TextNode Functions ]
# TextNode函数的概念: 返回值嵌入到模板中的函数，TextNode函数可以有副作用，比如: 建立一个文件
# 调用另一个模板文件等等

# -> R
function importR() {
    R=$(android.package) && [[ -n $R ]] && R+=.R && print "import $R;"
}


alias mkstyle.writer=basewriter
function mkstyle() {
    local -A opts
    zparseopts -A opts -K -D -- name:=opts parent:=opts o:=opts -f:=flags
    local name=$opts[-name]     &&  [[ -z $name   ]] && return -1
    local parent=$opts[-parent]
    local out=${opts[-o]:=$(find-android-project-home res/values/styles.xml)}
    [[ -f $out  ]] || (echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n</resources>" > "$out")
    local xml=
    xml="$(<$out)" && [[ -z $xml ]] && @DF "xml is null" && return -1
    xml=$(print "$xml" | android.xml.addStyle -name $name -parent "$parent" $*)
    print "$xml" | mkstyle.writer "$out"
    print "$name"
}


alias mkpreference.writer=basewriter
function mkpreference() {
    parse_options() {
        zparseopts -A opts -K -D -- gf:=opts id:=opts body:=opts
    }
    parse_options $*
    
    local id=$opts[-id]
    local srcroot="$(find-android-project-home res/xml)"
    local body="$opts[-body]"
 
    if [[ -n $srcroot ]]; then
        [[ -d $srcroot ]] || mkdir "$srcroot"
        out="$srcroot/$id.xml"
    else
        out=$id.xml
    fi
    # echo "$body" > "$out" && logd "$id" "$content"
    echo "$body" | mkpreference.writer "$out"
    print $id
}

###
alias mklayout.writer=basewriter
function mklayout() {
    parse_options() {
        zparseopts -A opts -K -D -- rf:=opts gf:=opts id:=opts body:=opts
    }
    parse_options $*
    
    local rf='find-android-project-home res/layout'
    local srcroot="$(eval ${rf})"
    local id=$opts[-id]
    local body="$opts[-body]"

    if [[ -d $srcroot ]]; then
        out=$srcroot/$id.xml
    else
        @E "$id(WARN)" "目录不存在: '$srcroot'" 
        out=$id.xml
    fi
    echo "$body" | mklayout.writer "$out" && @DF "layout/$id.xml" "$body"
    @DF "layout/$id.xml created"
    print $id
}

###
alias mkarray.writer=basewriter
function mkarray() {
    local arrays_xml=$(find-android-project-home res/values/arrays.xml)
    [[ -f $arrays_xml ]] || echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n</resources>" > "$arrays_xml"
    local xml=
    xml=$(< $arrays_xml) && [[ -z $xml ]] && logf "input xml is empty." && return

    echo "$xml" | android.xml.addStringArray $* | mkarray.writer "$arrays_xml" && logf "strings-array[name=$1] added to '$arrays_xml'"
    print "$1"
}

###
alias mkpermissions.writer=basewriter
function mkpermissions() {
    local manifest="$(find-android-project-home AndroidManifest.xml)";
    echo "$(< $manifest)" | android.xml.addPermissions $* | mkpermissions.writer "$manifest"
    print -l $*
}

alias mkmeta.writer=basewriter
function mkmeta() {
    local manifest="$(find-android-project-home AndroidManifest.xml)";
    local package=$(android.package)
    local name="$1"; shift
    local xml=
    xml=$(< $manifest)

    echo "$xml" | xpath.matched.refuse "/manifest/application/meta-data[@android:name='$name']" | android.xml.addMeta "$name" $* | basewriter "$manifest"
    echo "$name"
}

### 
alias mkactivity.writer=basewriter
function mkactivity() { 
    help() {
        echo "$mkactivity .ui.TestActivity"
    }
    local manifest="$(find-android-project-home AndroidManifest.xml)";
    local package=$(android.package)
    local className="$1"; shift
    local xml=
    xml=$(< $manifest)

    help() {
        echo " 在AndroidMandifest中添加Activity标签"
        echo " $(basename $0) org.amas.ui.MainActivity android:enabled=false android:theme=xxx"
        echo " TODO: implement -file options"
    }
    
    if [[ -z $(echo "$xml" | xpath.matched.refuse "/manifest/application/activity[@android:name='$className']") ]]; then
        @IF "Activity: '$className' existed, changed nothing"
        return -1
    else 
        echo "$xml" | android.xml.addActivity "$className" $* | mkactivity.writer "$manifest"
        @IF "Activity: '$className' added to '$manifest'"
    fi
    print $className
}


###
alias mkstring.writer=basewriter
function mkstring() {
    local name="$1"
    local text="$2"
    local strings_xml=$(find-android-project-home res/values/strings.xml)
    if [[ -f "$strings_xml" ]]; then
    else 
        echo $name
        return -1
    fi

    xml=$(< "$strings_xml")

    [[ -z $xml ]] && return -1
    xml=$(echo "$xml" | xpath.matched.refuse "/resources/string[@name='$name']" | android.xml.addString "$name" "$text"  2> /dev/null)

    if (( $? == 0 )); then
        if [[ -n $xml ]]; then
            echo "$xml" | mkstring.writer "$strings_xml"
        else
            @IF "element existed"
        fi
    else
        @EF "add string failed (error code: $?)"
    fi
    echo $name
}


function addStaticLib() {
    local jar="$1"
    local libs=$(find-android-project-home libs)
    [[ -z $libs ]] && return -1
    [[ -d $libs ]] || mkdir $libs
    [[ -d $libs ]] && cp "$1" "$libs" && return
}

alias mkreceiver.writer=basewriter
function mkreceiver() {
    local manifest="$(find-android-project-home AndroidManifest.xml)";
    local package=$(android.package)
    local className="$1"; shift
    local xml=
    xml=$(< $manifest)

    print $className
    if [[ -z $(echo "$xml" | xpath.matched.refuse "/manifest/application/receiver[@android:name='$className']") ]]; then
        @IF "Receiver: '$className' existed, changed nothing"
        #echo "$xml" | Android.xml.updateActivity "$className" $* | mkactivity.writer "$manifest"
        
        return -1
    else 
        echo "$xml" | android.xml.addReceiver "$className" $* | mkreceiver.writer "$manifest"
        @IF "Receiver: '$className' added to '$manifest'"
    fi
}


function android.addDrawbleXml() {
    local content="$1"
    local id="$2"
    [[ -z $id ]] && return -1
    android.addFile "$content" "res/drawable/$id.xml"
    print $id
}

function android.addFile() {
    local content="$1"
    local target=$(find-android-project-home "$2")
    # @IF "add file '$target'"
    # @DF "$content"
    echo "$1" | basewriter $target
}

argtest() {
    echo "数量=$#"
}

