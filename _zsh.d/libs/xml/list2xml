#!/bin/zsh
# 更方便书写xml
function main() {
    # local spec="$1"
    
    # local opts
    zparseopts -A opts -K -D -E  -- g:=opts
    local O="$opts[-g]"
    local spec=

    if (( $#argv > 0 )); then
        spec="$*"
    else
        spec="$(<&0)"
    fi

    # @EF "$spec"

    local -a stack

    ### stack
    stack=()
    put() { stack=("$1" $stack) }
    pop() { (( $#stack > 0 )) && stack=($stack[1,-2]) || return -1 }
    top() { print $stack[-1] }
    
  

    local -A map
    map=()
    local -i height=0
    local -i maxHeight=0
    
    local base s
    local -a child childNum
    child=()
    childNum=()
    base=""

    
    on-new-word () {
        local w="$1"

        if [[ -n $w ]]; then
            if [[ -z  $map[$base] ]]; then
                # base=$(dirname $base)/$w
                # @IF "base=$base"
                map[$base]+="//*[@_id='$(dirname $base)'] $w"     
            else
                map[$base]+=" $w"
            fi 
        fi
        word=
    }

    
    # NOTE: performance tunning
    # 1: bare loop are very slow!!!
    # integer time=$(date +%s%N)
    integer size
    size=$#spec
    for (( i=1; i<=size; ++i)) do     
        c="$spec[i]"
        if (( false )); then
            break
        elif [[ $c == ' ' || $c == $'\n' ]]; then 
            on-new-word  "$word"
        elif [[ $c == '(' ]]; then 
            on-new-word  "$word"
            (( maxHeight=++height ))
            (( childNum[height]+=1 ))
            base+="/$childNum[height]"
            put "$c"
        elif [[ $c == ')' ]]; then
            on-new-word  "$word"
            (( --height ))
            base=$(dirname $base)
            pop || return -3
        else
            word+="$c"
        fi           
    done
    
    # time2=$(date +%s%N)
    # @DF "SPEC --> MAP: DONE : $#map 元素 $(( ($time2-$time) / 1000000 )) 毫秒 "
    local xml='<?xml version="1.0" encoding="utf-8"?>
<root/>'
    local name p

    local -i n=1
    for id in ${(ok)map};do
        # print -f "%-20s : '%s'\n" $elem $map[$elem]
        child=(${=map[$id]})
        xparent="$child[1]"
        name="$child[2]"

        # @EF "$xparent/$name [ $child[3,-1] ]"
        if (( n == 1)); then
            # @EF "$child[3,-1]"
            xml=$(echo "$xml" | newElement  /root -name $name _id=$id $child[3,-1] 2> /dev/null)
            xml=$(echo "$xml" | xml sel -D -E "utf-8" -t -m /root -c 'node()' 2> /dev/null )
        else
            xml=$(echo "$xml" | newElement "$xparent" -name $name _id="$id" $child[3,-1] 2> /dev/null)
        fi
        (( n++ ))
    done
    echo "$xml" | xml ed -O -d "//@_id" 2> /dev/null
    # @EF "Tree: height=$maxHeight  stack='$stack'"
    

    if [[ -n $stack ]]; then
        s=-2
    fi 
    return $s
}

main $*
