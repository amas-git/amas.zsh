#!/bin/zsh

# same as newElement except  duplicated attribute only keep the last one
function main() {
    help() {
        echo "newElement /parent/element -name elementName [-value elementValue] [attr1=value1 attr2=value2 ...]"
        echo 'e.g:'
        echo '$ echo "<a></a>" | newElement /a/xxx "" id=1'
        echo '<?xml version="1.0"?>'
        echo '<a>'
        echo '  <xxx id="1" />'
        echo '</a>'
        echo ' -guard : xpath test condition, if matched guard, the new element will NOT added'
    }
    [[ $# < 1 ]] && help && return -2
    local opts
    zparseopts -A opts -K -D -E  -- name:=opts value:=opts guard:=opts g:=opts
    local xml=
    xml=$(<&0)
    local parent="$1"; shift
    local elementN=$opts[-name] ; [[ -z $elementN ]] && help && return -6
    local elementV=$opts[-value]
    local guard="$opts[-guard]"
    local O="$opts[-g]" 

    [[ -z $xml ]] && return 0

    local guardMached=
    # guard test
    if [[ -n $guard ]]; then
        guardMached=$(echo "$xml" | xml sel -I -t -i "$guard" -o "true" --else -o "false")
        @DF "guard='$guard' test result: '$guardMached'"
        [[ $guardMached == true ]] && echo "$xml" && return 0
    fi

    local name value options
    local uuid=$(uuid)
    options+="$O -s \"$parent\"  -t elem -n $uuid -v \"$elementV\""
    
    local pair
    local -A amap
    pair=()
    for x in $argv ; do 
       pair=(${(s:=:)x})
       name=$pair[1]
       value=$pair[2] 
       [[ -n $value ]] && amap[$name]=" -s \"$parent/$uuid\" -t attr -n $name -v \"$value\""
       # options+=" -s \"$parent/$uuid\" -t attr -n $name -v \"$value\""
    done
    options+=$(print ${(o)amap})
    # @EF "$options"
    
    # @DF "echo \$xml | xml ed $options -r //$uuid -v $elementN"
    eval "echo \$xml | xml ed -S $XML_OPTS $options -r //$uuid -v $elementN"
}

main $*
